{"version":3,"sources":["MedalWidget.js","serviceWorker.js","index.js"],"names":["idMaker","index","addTotal","row","Object","assign","total","gold","silver","bronze","isOrder","order","current","sortRows","a","b","useDataApi","initialData","useState","data","setData","isLoading","setIsLoading","isError","setIsError","useEffect","fetch","result","json","error","map","fetchData","renderRow","id","key","code","className","toLowerCase","MedalWidget","idCounter","sortOrder","setSortOrder","rows","setRows","slice","sort","colSpan","onClick","next","value","initialize","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.714db2c4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './MedalWidget.css';\n\nconst url = 'https://s3-us-west-2.amazonaws.com/reuters.medals-widget/medals.json';\n\nconst idMaker = function* () {\n  let index = 1;\n  while (true) yield index++;\n}\n\nconst addTotal = row =>\n  Object.assign(row, { total: row.gold + row.silver + row.bronze });\n\nconst isOrder = (order, current) =>\n  (order === current ? 'sorting' : '');\n\nconst sortRows = order => (a, b) => {\n  switch (order) {\n    case 'gold':\n      if (a.gold !== b.gold) {\n        return b.gold - a.gold;\n      }\n      return b.silver - a.silver;\n    case 'silver':\n      if (a.silver !== b.silver) {\n        return b.silver - a.silver;\n      }\n      return b.gold - a.gold;\n    case 'bronze':\n      if (a.bronze !== b.bronze) {\n        return b.bronze - a.bronze;\n      }\n      return b.gold - a.gold;\n    default:\n      if (a.total !== b.total) {\n        return b.total - a.total;\n      }\n      return b.gold - a.gold;\n  }\n}\n\nconst useDataApi = (initialData) => {\n  const [data, setData] = useState(initialData);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await fetch(url);\n        const json = await result.json();\n        if (json.error) {\n          setIsError(true);\n        }\n        setData(json.map(addTotal));\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, []);\n\n  return [data, isLoading, isError];\n};\n\nconst renderRow = (id, row) => (\n  <tr key={row.code} className='row'>\n    <td className='id'>{id}</td>\n    <td className='flag' >\n      <div className={`flagSprite flag-${row.code.toLowerCase()}`} />\n    </td>\n    <td className='country'>{row.code}</td>\n    <td className='medal'>{row.gold}</td>\n    <td className='medal'>{row.silver}</td>\n    <td className='medal'>{row.bronze}</td>\n    <td className='medal bold'>{row.total}</td>\n  </tr>\n);\n\nfunction MedalWidget({ order = 'gold' }) {\n  const idCounter = idMaker();\n  const [data, isLoading, isError] = useDataApi([]);\n  const [sortOrder, setSortOrder] = useState(order);\n  const [rows, setRows] = useState([]);\n\n  useEffect(() => {\n    setRows(data.slice().sort(sortRows(sortOrder)));\n  }, [data, sortOrder]);\n\n  return (\n    <div className=\"medal-widget\">\n      {isError && <div>Something went wrong ...</div>}\n\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n          <table>\n            <thead>\n              <tr><td colSpan={7} className='title'>MEDAL COUNT</td></tr>\n              <tr>\n                <td colSpan={3}></td>\n                <td\n                  className={`medal ${isOrder('gold', sortOrder)}`}\n                  onClick={() => setSortOrder('gold')}\n                >\n                  <div className='dot goldDot' />\n                </td>\n                <td\n                  className={`medal ${isOrder('silver', sortOrder)}`}\n                  onClick={() => setSortOrder('silver')}\n                >\n                  <div className='dot silverDot' />\n                </td>\n                <td\n                  className={`medal ${isOrder('bronze', sortOrder)}`}\n                  onClick={() => setSortOrder('bronze')}\n                >\n                  <div className='dot bronzeDot' />\n                </td>\n                <td\n                  className={`medal bold ${isOrder('total', sortOrder)}`}\n                  onClick={() => setSortOrder('total')}\n                >\n                  TOTAL\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              {rows.map(row => renderRow(idCounter.next().value, row))}\n            </tbody>\n          </table>\n        )}\n    </div>\n  );\n}\n\nMedalWidget.initialize = (id, order) =>\n  ReactDOM.render(<MedalWidget order={order} />, document.getElementById(id));\n\nexport default MedalWidget;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//import React from 'react';\n//import ReactDOM from 'react-dom';\nimport './index.css';\nimport MedalWidget from './MedalWidget';\nimport * as serviceWorker from './serviceWorker';\n\n//ReactDOM.render(<MedalWidget /*sort=\"gold\"*/ />, document.getElementById('root'));\n\nwindow.MedalWidget = MedalWidget;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}